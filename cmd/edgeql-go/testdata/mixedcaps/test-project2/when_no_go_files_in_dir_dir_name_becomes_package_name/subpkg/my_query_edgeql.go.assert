// Code generated by github.com/edgedb/edgedb-go/cmd/edgeql-go DO NOT EDIT.

package zzz

import (
	"context"
	_ "embed"
	"math/big"
	"time"

	"github.com/edgedb/edgedb-go"
)

//go:embed my_query.edgeql
var myQueryCmd string

// myQueryResult
// is part of the return type for
// myQuery()
type myQueryResult struct {
	A  edgedb.UUID                       `edgedb:"a"`
	B  edgedb.OptionalUUID               `edgedb:"b"`
	C  string                            `edgedb:"c"`
	D  edgedb.OptionalStr                `edgedb:"d"`
	E  []byte                            `edgedb:"e"`
	F  edgedb.OptionalBytes              `edgedb:"f"`
	G  int16                             `edgedb:"g"`
	H  edgedb.OptionalInt16              `edgedb:"h"`
	I  int32                             `edgedb:"i"`
	J  edgedb.OptionalInt32              `edgedb:"j"`
	K  int64                             `edgedb:"k"`
	L  edgedb.OptionalInt64              `edgedb:"l"`
	M  float32                           `edgedb:"m"`
	N  edgedb.OptionalFloat32            `edgedb:"n"`
	O  float64                           `edgedb:"o"`
	P  edgedb.OptionalFloat64            `edgedb:"p"`
	Q  bool                              `edgedb:"q"`
	R  edgedb.OptionalBool               `edgedb:"r"`
	S  time.Time                         `edgedb:"s"`
	T  edgedb.OptionalDateTime           `edgedb:"t"`
	U  edgedb.LocalDateTime              `edgedb:"u"`
	V  edgedb.OptionalLocalDateTime      `edgedb:"v"`
	W  edgedb.LocalDate                  `edgedb:"w"`
	X  edgedb.OptionalLocalDate          `edgedb:"x"`
	Y  edgedb.LocalTime                  `edgedb:"y"`
	Z  edgedb.OptionalLocalTime          `edgedb:"z"`
	Aa edgedb.Duration                   `edgedb:"aa"`
	Ab edgedb.OptionalDuration           `edgedb:"ab"`
	Ac *big.Int                          `edgedb:"ac"`
	Ad edgedb.OptionalBigInt             `edgedb:"ad"`
	Ae edgedb.RelativeDuration           `edgedb:"ae"`
	Af edgedb.OptionalRelativeDuration   `edgedb:"af"`
	Ag edgedb.DateDuration               `edgedb:"ag"`
	Ah edgedb.OptionalDateDuration       `edgedb:"ah"`
	Ai edgedb.Memory                     `edgedb:"ai"`
	Aj edgedb.OptionalMemory             `edgedb:"aj"`
	Ak edgedb.RangeInt32                 `edgedb:"ak"`
	Al edgedb.OptionalRangeInt32         `edgedb:"al"`
	Am edgedb.RangeInt64                 `edgedb:"am"`
	An edgedb.OptionalRangeInt64         `edgedb:"an"`
	Ao edgedb.RangeFloat32               `edgedb:"ao"`
	Ap edgedb.OptionalRangeFloat32       `edgedb:"ap"`
	Aq edgedb.RangeFloat64               `edgedb:"aq"`
	Ar edgedb.OptionalRangeFloat64       `edgedb:"ar"`
	As edgedb.RangeDateTime              `edgedb:"as"`
	At edgedb.OptionalRangeDateTime      `edgedb:"at"`
	Au edgedb.RangeLocalDateTime         `edgedb:"au"`
	Av edgedb.OptionalRangeLocalDateTime `edgedb:"av"`
	Aw edgedb.RangeLocalDate             `edgedb:"aw"`
	Ax edgedb.OptionalRangeLocalDate     `edgedb:"ax"`
	Ay int64                             `edgedb:"ay"`
	Az edgedb.OptionalInt64              `edgedb:"az"`
	Ba string                            `edgedb:"ba"`
	Bb edgedb.OptionalStr                `edgedb:"bb"`
}

// myQuery
// runs the query found in
// my_query.edgeql
func myQuery(
	ctx context.Context,
	client *edgedb.Client,
	A edgedb.UUID,
	B edgedb.OptionalUUID,
	C string,
	D edgedb.OptionalStr,
	E []byte,
	F edgedb.OptionalBytes,
	G int16,
	H edgedb.OptionalInt16,
	I int32,
	J edgedb.OptionalInt32,
	K int64,
	L edgedb.OptionalInt64,
	M float32,
	N edgedb.OptionalFloat32,
	O float64,
	P edgedb.OptionalFloat64,
	Q bool,
	R edgedb.OptionalBool,
	S time.Time,
	T edgedb.OptionalDateTime,
	U edgedb.LocalDateTime,
	V edgedb.OptionalLocalDateTime,
	W edgedb.LocalDate,
	X edgedb.OptionalLocalDate,
	Y edgedb.LocalTime,
	Z edgedb.OptionalLocalTime,
	Aa edgedb.Duration,
	Ab edgedb.OptionalDuration,
	Ac *big.Int,
	Ad edgedb.OptionalBigInt,
	Ae edgedb.RelativeDuration,
	Af edgedb.OptionalRelativeDuration,
	Ag edgedb.DateDuration,
	Ah edgedb.OptionalDateDuration,
	Ai edgedb.Memory,
	Aj edgedb.OptionalMemory,
	Ak edgedb.RangeInt32,
	Al edgedb.OptionalRangeInt32,
	Am edgedb.RangeInt64,
	An edgedb.OptionalRangeInt64,
	Ao edgedb.RangeFloat32,
	Ap edgedb.OptionalRangeFloat32,
	Aq edgedb.RangeFloat64,
	Ar edgedb.OptionalRangeFloat64,
	As edgedb.RangeDateTime,
	At edgedb.OptionalRangeDateTime,
	Au edgedb.RangeLocalDateTime,
	Av edgedb.OptionalRangeLocalDateTime,
	Aw edgedb.RangeLocalDate,
	Ax edgedb.OptionalRangeLocalDate,
) (myQueryResult, error) {
	var result myQueryResult

	err := client.QuerySingle(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  A,
			"b":  B,
			"c":  C,
			"d":  D,
			"e":  E,
			"f":  F,
			"g":  G,
			"h":  H,
			"i":  I,
			"j":  J,
			"k":  K,
			"l":  L,
			"m":  M,
			"n":  N,
			"o":  O,
			"p":  P,
			"q":  Q,
			"r":  R,
			"s":  S,
			"t":  T,
			"u":  U,
			"v":  V,
			"w":  W,
			"x":  X,
			"y":  Y,
			"z":  Z,
			"aa": Aa,
			"ab": Ab,
			"ac": Ac,
			"ad": Ad,
			"ae": Ae,
			"af": Af,
			"ag": Ag,
			"ah": Ah,
			"ai": Ai,
			"aj": Aj,
			"ak": Ak,
			"al": Al,
			"am": Am,
			"an": An,
			"ao": Ao,
			"ap": Ap,
			"aq": Aq,
			"ar": Ar,
			"as": As,
			"at": At,
			"au": Au,
			"av": Av,
			"aw": Aw,
			"ax": Ax,
		},
	)

	return result, err
}

// myQueryJSON
// runs the query found in
// my_query.edgeql
// returning the results as json encoded bytes
func myQueryJSON(
	ctx context.Context,
	client *edgedb.Client,
	A edgedb.UUID,
	B edgedb.OptionalUUID,
	C string,
	D edgedb.OptionalStr,
	E []byte,
	F edgedb.OptionalBytes,
	G int16,
	H edgedb.OptionalInt16,
	I int32,
	J edgedb.OptionalInt32,
	K int64,
	L edgedb.OptionalInt64,
	M float32,
	N edgedb.OptionalFloat32,
	O float64,
	P edgedb.OptionalFloat64,
	Q bool,
	R edgedb.OptionalBool,
	S time.Time,
	T edgedb.OptionalDateTime,
	U edgedb.LocalDateTime,
	V edgedb.OptionalLocalDateTime,
	W edgedb.LocalDate,
	X edgedb.OptionalLocalDate,
	Y edgedb.LocalTime,
	Z edgedb.OptionalLocalTime,
	Aa edgedb.Duration,
	Ab edgedb.OptionalDuration,
	Ac *big.Int,
	Ad edgedb.OptionalBigInt,
	Ae edgedb.RelativeDuration,
	Af edgedb.OptionalRelativeDuration,
	Ag edgedb.DateDuration,
	Ah edgedb.OptionalDateDuration,
	Ai edgedb.Memory,
	Aj edgedb.OptionalMemory,
	Ak edgedb.RangeInt32,
	Al edgedb.OptionalRangeInt32,
	Am edgedb.RangeInt64,
	An edgedb.OptionalRangeInt64,
	Ao edgedb.RangeFloat32,
	Ap edgedb.OptionalRangeFloat32,
	Aq edgedb.RangeFloat64,
	Ar edgedb.OptionalRangeFloat64,
	As edgedb.RangeDateTime,
	At edgedb.OptionalRangeDateTime,
	Au edgedb.RangeLocalDateTime,
	Av edgedb.OptionalRangeLocalDateTime,
	Aw edgedb.RangeLocalDate,
	Ax edgedb.OptionalRangeLocalDate,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  A,
			"b":  B,
			"c":  C,
			"d":  D,
			"e":  E,
			"f":  F,
			"g":  G,
			"h":  H,
			"i":  I,
			"j":  J,
			"k":  K,
			"l":  L,
			"m":  M,
			"n":  N,
			"o":  O,
			"p":  P,
			"q":  Q,
			"r":  R,
			"s":  S,
			"t":  T,
			"u":  U,
			"v":  V,
			"w":  W,
			"x":  X,
			"y":  Y,
			"z":  Z,
			"aa": Aa,
			"ab": Ab,
			"ac": Ac,
			"ad": Ad,
			"ae": Ae,
			"af": Af,
			"ag": Ag,
			"ah": Ah,
			"ai": Ai,
			"aj": Aj,
			"ak": Ak,
			"al": Al,
			"am": Am,
			"an": An,
			"ao": Ao,
			"ap": Ap,
			"aq": Aq,
			"ar": Ar,
			"as": As,
			"at": At,
			"au": Au,
			"av": Av,
			"aw": Aw,
			"ax": Ax,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
