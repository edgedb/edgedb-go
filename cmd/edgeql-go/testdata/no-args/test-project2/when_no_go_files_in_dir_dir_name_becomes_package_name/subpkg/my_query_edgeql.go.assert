// Code generated by github.com/edgedb/edgedb-go/cmd/edgeql-go DO NOT EDIT.

package zzz

import (
	"context"
	_ "embed"
	"math/big"
	"time"

	gel "github.com/edgedb/edgedb-go"
)

//go:embed my_query.edgeql
var myQueryCmd string

// myQueryResult
// is part of the return type for
// myQuery()
type myQueryResult struct {
	a  gel.UUID                       `edgedb:"a"`
	b  gel.OptionalUUID               `edgedb:"b"`
	c  string                         `edgedb:"c"`
	d  gel.OptionalStr                `edgedb:"d"`
	e  []byte                         `edgedb:"e"`
	f  gel.OptionalBytes              `edgedb:"f"`
	g  int16                          `edgedb:"g"`
	h  gel.OptionalInt16              `edgedb:"h"`
	i  int32                          `edgedb:"i"`
	j  gel.OptionalInt32              `edgedb:"j"`
	k  int64                          `edgedb:"k"`
	l  gel.OptionalInt64              `edgedb:"l"`
	m  float32                        `edgedb:"m"`
	n  gel.OptionalFloat32            `edgedb:"n"`
	o  float64                        `edgedb:"o"`
	p  gel.OptionalFloat64            `edgedb:"p"`
	q  bool                           `edgedb:"q"`
	r  gel.OptionalBool               `edgedb:"r"`
	s  time.Time                      `edgedb:"s"`
	t  gel.OptionalDateTime           `edgedb:"t"`
	u  gel.LocalDateTime              `edgedb:"u"`
	v  gel.OptionalLocalDateTime      `edgedb:"v"`
	w  gel.LocalDate                  `edgedb:"w"`
	x  gel.OptionalLocalDate          `edgedb:"x"`
	y  gel.LocalTime                  `edgedb:"y"`
	z  gel.OptionalLocalTime          `edgedb:"z"`
	aa gel.Duration                   `edgedb:"aa"`
	ab gel.OptionalDuration           `edgedb:"ab"`
	ac *big.Int                       `edgedb:"ac"`
	ad gel.OptionalBigInt             `edgedb:"ad"`
	ae gel.RelativeDuration           `edgedb:"ae"`
	af gel.OptionalRelativeDuration   `edgedb:"af"`
	ag gel.DateDuration               `edgedb:"ag"`
	ah gel.OptionalDateDuration       `edgedb:"ah"`
	ai gel.Memory                     `edgedb:"ai"`
	aj gel.OptionalMemory             `edgedb:"aj"`
	ak gel.RangeInt32                 `edgedb:"ak"`
	al gel.OptionalRangeInt32         `edgedb:"al"`
	am gel.RangeInt64                 `edgedb:"am"`
	an gel.OptionalRangeInt64         `edgedb:"an"`
	ao gel.RangeFloat32               `edgedb:"ao"`
	ap gel.OptionalRangeFloat32       `edgedb:"ap"`
	aq gel.RangeFloat64               `edgedb:"aq"`
	ar gel.OptionalRangeFloat64       `edgedb:"ar"`
	as gel.RangeDateTime              `edgedb:"as"`
	at gel.OptionalRangeDateTime      `edgedb:"at"`
	au gel.RangeLocalDateTime         `edgedb:"au"`
	av gel.OptionalRangeLocalDateTime `edgedb:"av"`
	aw gel.RangeLocalDate             `edgedb:"aw"`
	ax gel.OptionalRangeLocalDate     `edgedb:"ax"`
	ay int64                          `edgedb:"ay"`
	az gel.OptionalInt64              `edgedb:"az"`
	ba string                         `edgedb:"ba"`
	bb gel.OptionalStr                `edgedb:"bb"`
}

// myQuery
// runs the query found in
// my_query.edgeql
func myQuery(
	ctx context.Context,
	client *gel.Client,
	a gel.UUID,
	b gel.OptionalUUID,
	c string,
	d gel.OptionalStr,
	e []byte,
	f gel.OptionalBytes,
	g int16,
	h gel.OptionalInt16,
	i int32,
	j gel.OptionalInt32,
	k int64,
	l gel.OptionalInt64,
	m float32,
	n gel.OptionalFloat32,
	o float64,
	p gel.OptionalFloat64,
	q bool,
	r gel.OptionalBool,
	s time.Time,
	t gel.OptionalDateTime,
	u gel.LocalDateTime,
	v gel.OptionalLocalDateTime,
	w gel.LocalDate,
	x gel.OptionalLocalDate,
	y gel.LocalTime,
	z gel.OptionalLocalTime,
	aa gel.Duration,
	ab gel.OptionalDuration,
	ac *big.Int,
	ad gel.OptionalBigInt,
	ae gel.RelativeDuration,
	af gel.OptionalRelativeDuration,
	ag gel.DateDuration,
	ah gel.OptionalDateDuration,
	ai gel.Memory,
	aj gel.OptionalMemory,
	ak gel.RangeInt32,
	al gel.OptionalRangeInt32,
	am gel.RangeInt64,
	an gel.OptionalRangeInt64,
	ao gel.RangeFloat32,
	ap gel.OptionalRangeFloat32,
	aq gel.RangeFloat64,
	ar gel.OptionalRangeFloat64,
	as gel.RangeDateTime,
	at gel.OptionalRangeDateTime,
	au gel.RangeLocalDateTime,
	av gel.OptionalRangeLocalDateTime,
	aw gel.RangeLocalDate,
	ax gel.OptionalRangeLocalDate,
) (myQueryResult, error) {
	var result myQueryResult

	err := client.QuerySingle(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)

	return result, err
}

// myQueryJSON
// runs the query found in
// my_query.edgeql
// returning the results as json encoded bytes
func myQueryJSON(
	ctx context.Context,
	client *gel.Client,
	a gel.UUID,
	b gel.OptionalUUID,
	c string,
	d gel.OptionalStr,
	e []byte,
	f gel.OptionalBytes,
	g int16,
	h gel.OptionalInt16,
	i int32,
	j gel.OptionalInt32,
	k int64,
	l gel.OptionalInt64,
	m float32,
	n gel.OptionalFloat32,
	o float64,
	p gel.OptionalFloat64,
	q bool,
	r gel.OptionalBool,
	s time.Time,
	t gel.OptionalDateTime,
	u gel.LocalDateTime,
	v gel.OptionalLocalDateTime,
	w gel.LocalDate,
	x gel.OptionalLocalDate,
	y gel.LocalTime,
	z gel.OptionalLocalTime,
	aa gel.Duration,
	ab gel.OptionalDuration,
	ac *big.Int,
	ad gel.OptionalBigInt,
	ae gel.RelativeDuration,
	af gel.OptionalRelativeDuration,
	ag gel.DateDuration,
	ah gel.OptionalDateDuration,
	ai gel.Memory,
	aj gel.OptionalMemory,
	ak gel.RangeInt32,
	al gel.OptionalRangeInt32,
	am gel.RangeInt64,
	an gel.OptionalRangeInt64,
	ao gel.RangeFloat32,
	ap gel.OptionalRangeFloat32,
	aq gel.RangeFloat64,
	ar gel.OptionalRangeFloat64,
	as gel.RangeDateTime,
	at gel.OptionalRangeDateTime,
	au gel.RangeLocalDateTime,
	av gel.OptionalRangeLocalDateTime,
	aw gel.RangeLocalDate,
	ax gel.OptionalRangeLocalDate,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
