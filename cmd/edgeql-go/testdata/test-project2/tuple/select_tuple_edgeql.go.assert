// Code generated by github.com/edgedb/edgedb-go/cmd/edgeql-go DO NOT EDIT.

package tuple

import (
	"context"
	_ "embed"

	"github.com/edgedb/edgedb-go"
)

//go:embed select_tuple.edgeql
var selectTupleCmd string

// selectTupleResult
// is part of the return type for
// selectTuple()
type selectTupleResult struct {
	Element0 edgedb.OptionalStr     `edgedb:"Element0"`
	Element1 edgedb.OptionalInt64   `edgedb:"Element1"`
	Element2 selectTupleResult2Item `edgedb:"Element2"`
}

// selectTupleResult2Item
// is part of the return type for
// selectTuple()
type selectTupleResult2Item struct {
	Element0 edgedb.OptionalStr   `edgedb:"Element0"`
	Element1 edgedb.OptionalInt64 `edgedb:"Element1"`
}

// selectTuple
// runs the query found in
// select_tuple.edgeql
func selectTuple(
	ctx context.Context,
	client *edgedb.Client,
) (selectTupleResult, error) {
	var result selectTupleResult

	err := client.QuerySingle(
		ctx,
		selectTupleCmd,
		&result,
	)

	return result, err
}

// selectTupleJSON
// runs the query found in
// select_tuple.edgeql
// returning the results as json encoded bytes
func selectTupleJSON(
	ctx context.Context,
	client *edgedb.Client,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		selectTupleCmd,
		&result,
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
