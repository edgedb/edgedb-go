// Code generated by github.com/edgedb/edgedb-go/cmd/edgeql-go DO NOT EDIT.

package zzz

import (
	"context"
	_ "embed"
	"math/big"
	"time"

	"github.com/edgedb/edgedb-go"
)

//go:embed my_query.edgeql
var myQueryCmd string

// myQuery
// runs the query found in
// my_query.edgeql
func myQuery(
	ctx context.Context,
	client *edgedb.Client,
	a edgedb.UUID,
	b edgedb.OptionalUUID,
	c string,
	d edgedb.OptionalStr,
	e []byte,
	f edgedb.OptionalBytes,
	g int16,
	h edgedb.OptionalInt16,
	i int32,
	j edgedb.OptionalInt32,
	k int64,
	l edgedb.OptionalInt64,
	m float32,
	n edgedb.OptionalFloat32,
	o float64,
	p edgedb.OptionalFloat64,
	q bool,
	r edgedb.OptionalBool,
	s time.Time,
	t edgedb.OptionalDateTime,
	u edgedb.LocalDateTime,
	v edgedb.OptionalLocalDateTime,
	w edgedb.LocalDate,
	x edgedb.OptionalLocalDate,
	y edgedb.LocalTime,
	z edgedb.OptionalLocalTime,
	aa edgedb.Duration,
	ab edgedb.OptionalDuration,
	ac *big.Int,
	ad edgedb.OptionalBigInt,
	ae edgedb.RelativeDuration,
	af edgedb.OptionalRelativeDuration,
	ag edgedb.DateDuration,
	ah edgedb.OptionalDateDuration,
	ai edgedb.Memory,
	aj edgedb.OptionalMemory,
	ak edgedb.OptionalRangeInt32,
	al edgedb.RangeInt32,
	am edgedb.OptionalRangeInt64,
	an edgedb.RangeInt64,
	ao edgedb.OptionalRangeFloat32,
	ap edgedb.RangeFloat32,
	aq edgedb.OptionalRangeFloat64,
	ar edgedb.RangeFloat64,
	as edgedb.OptionalRangeDateTime,
	at edgedb.RangeDateTime,
	au edgedb.OptionalRangeLocalDateTime,
	av edgedb.RangeLocalDateTime,
	aw edgedb.OptionalRangeLocalDate,
	ax edgedb.RangeLocalDate,
) (struct {
	a  edgedb.UUID                       `edgedb:"a"`
	b  edgedb.OptionalUUID               `edgedb:"b"`
	c  string                            `edgedb:"c"`
	d  edgedb.OptionalStr                `edgedb:"d"`
	e  []byte                            `edgedb:"e"`
	f  edgedb.OptionalBytes              `edgedb:"f"`
	g  int16                             `edgedb:"g"`
	h  edgedb.OptionalInt16              `edgedb:"h"`
	i  int32                             `edgedb:"i"`
	j  edgedb.OptionalInt32              `edgedb:"j"`
	k  int64                             `edgedb:"k"`
	l  edgedb.OptionalInt64              `edgedb:"l"`
	m  float32                           `edgedb:"m"`
	n  edgedb.OptionalFloat32            `edgedb:"n"`
	o  float64                           `edgedb:"o"`
	p  edgedb.OptionalFloat64            `edgedb:"p"`
	q  bool                              `edgedb:"q"`
	r  edgedb.OptionalBool               `edgedb:"r"`
	s  time.Time                         `edgedb:"s"`
	t  edgedb.OptionalDateTime           `edgedb:"t"`
	u  edgedb.LocalDateTime              `edgedb:"u"`
	v  edgedb.OptionalLocalDateTime      `edgedb:"v"`
	w  edgedb.LocalDate                  `edgedb:"w"`
	x  edgedb.OptionalLocalDate          `edgedb:"x"`
	y  edgedb.LocalTime                  `edgedb:"y"`
	z  edgedb.OptionalLocalTime          `edgedb:"z"`
	aa edgedb.Duration                   `edgedb:"aa"`
	ab edgedb.OptionalDuration           `edgedb:"ab"`
	ac *big.Int                          `edgedb:"ac"`
	ad edgedb.OptionalBigInt             `edgedb:"ad"`
	ae edgedb.RelativeDuration           `edgedb:"ae"`
	af edgedb.OptionalRelativeDuration   `edgedb:"af"`
	ag edgedb.DateDuration               `edgedb:"ag"`
	ah edgedb.OptionalDateDuration       `edgedb:"ah"`
	ai edgedb.Memory                     `edgedb:"ai"`
	aj edgedb.OptionalMemory             `edgedb:"aj"`
	ak edgedb.OptionalRangeInt32         `edgedb:"ak"`
	al edgedb.RangeInt32                 `edgedb:"al"`
	am edgedb.OptionalRangeInt64         `edgedb:"am"`
	an edgedb.RangeInt64                 `edgedb:"an"`
	ao edgedb.OptionalRangeFloat32       `edgedb:"ao"`
	ap edgedb.RangeFloat32               `edgedb:"ap"`
	aq edgedb.OptionalRangeFloat64       `edgedb:"aq"`
	ar edgedb.RangeFloat64               `edgedb:"ar"`
	as edgedb.OptionalRangeDateTime      `edgedb:"as"`
	at edgedb.RangeDateTime              `edgedb:"at"`
	au edgedb.OptionalRangeLocalDateTime `edgedb:"au"`
	av edgedb.RangeLocalDateTime         `edgedb:"av"`
	aw edgedb.OptionalRangeLocalDate     `edgedb:"aw"`
	ax edgedb.RangeLocalDate             `edgedb:"ax"`
	ay int64                             `edgedb:"ay"`
	az edgedb.OptionalInt64              `edgedb:"az"`
	ba string                            `edgedb:"ba"`
	bb edgedb.OptionalStr                `edgedb:"bb"`
}, error) {
	var result struct {
		a  edgedb.UUID                       `edgedb:"a"`
		b  edgedb.OptionalUUID               `edgedb:"b"`
		c  string                            `edgedb:"c"`
		d  edgedb.OptionalStr                `edgedb:"d"`
		e  []byte                            `edgedb:"e"`
		f  edgedb.OptionalBytes              `edgedb:"f"`
		g  int16                             `edgedb:"g"`
		h  edgedb.OptionalInt16              `edgedb:"h"`
		i  int32                             `edgedb:"i"`
		j  edgedb.OptionalInt32              `edgedb:"j"`
		k  int64                             `edgedb:"k"`
		l  edgedb.OptionalInt64              `edgedb:"l"`
		m  float32                           `edgedb:"m"`
		n  edgedb.OptionalFloat32            `edgedb:"n"`
		o  float64                           `edgedb:"o"`
		p  edgedb.OptionalFloat64            `edgedb:"p"`
		q  bool                              `edgedb:"q"`
		r  edgedb.OptionalBool               `edgedb:"r"`
		s  time.Time                         `edgedb:"s"`
		t  edgedb.OptionalDateTime           `edgedb:"t"`
		u  edgedb.LocalDateTime              `edgedb:"u"`
		v  edgedb.OptionalLocalDateTime      `edgedb:"v"`
		w  edgedb.LocalDate                  `edgedb:"w"`
		x  edgedb.OptionalLocalDate          `edgedb:"x"`
		y  edgedb.LocalTime                  `edgedb:"y"`
		z  edgedb.OptionalLocalTime          `edgedb:"z"`
		aa edgedb.Duration                   `edgedb:"aa"`
		ab edgedb.OptionalDuration           `edgedb:"ab"`
		ac *big.Int                          `edgedb:"ac"`
		ad edgedb.OptionalBigInt             `edgedb:"ad"`
		ae edgedb.RelativeDuration           `edgedb:"ae"`
		af edgedb.OptionalRelativeDuration   `edgedb:"af"`
		ag edgedb.DateDuration               `edgedb:"ag"`
		ah edgedb.OptionalDateDuration       `edgedb:"ah"`
		ai edgedb.Memory                     `edgedb:"ai"`
		aj edgedb.OptionalMemory             `edgedb:"aj"`
		ak edgedb.OptionalRangeInt32         `edgedb:"ak"`
		al edgedb.RangeInt32                 `edgedb:"al"`
		am edgedb.OptionalRangeInt64         `edgedb:"am"`
		an edgedb.RangeInt64                 `edgedb:"an"`
		ao edgedb.OptionalRangeFloat32       `edgedb:"ao"`
		ap edgedb.RangeFloat32               `edgedb:"ap"`
		aq edgedb.OptionalRangeFloat64       `edgedb:"aq"`
		ar edgedb.RangeFloat64               `edgedb:"ar"`
		as edgedb.OptionalRangeDateTime      `edgedb:"as"`
		at edgedb.RangeDateTime              `edgedb:"at"`
		au edgedb.OptionalRangeLocalDateTime `edgedb:"au"`
		av edgedb.RangeLocalDateTime         `edgedb:"av"`
		aw edgedb.OptionalRangeLocalDate     `edgedb:"aw"`
		ax edgedb.RangeLocalDate             `edgedb:"ax"`
		ay int64                             `edgedb:"ay"`
		az edgedb.OptionalInt64              `edgedb:"az"`
		ba string                            `edgedb:"ba"`
		bb edgedb.OptionalStr                `edgedb:"bb"`
	}

	err := client.QuerySingle(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)

	return result, err
}

// myQueryJSON
// runs the query found in
// my_query.edgeql
// returning the results as json encoded bytes
func myQueryJSON(
	ctx context.Context,
	client *edgedb.Client,
	a edgedb.UUID,
	b edgedb.OptionalUUID,
	c string,
	d edgedb.OptionalStr,
	e []byte,
	f edgedb.OptionalBytes,
	g int16,
	h edgedb.OptionalInt16,
	i int32,
	j edgedb.OptionalInt32,
	k int64,
	l edgedb.OptionalInt64,
	m float32,
	n edgedb.OptionalFloat32,
	o float64,
	p edgedb.OptionalFloat64,
	q bool,
	r edgedb.OptionalBool,
	s time.Time,
	t edgedb.OptionalDateTime,
	u edgedb.LocalDateTime,
	v edgedb.OptionalLocalDateTime,
	w edgedb.LocalDate,
	x edgedb.OptionalLocalDate,
	y edgedb.LocalTime,
	z edgedb.OptionalLocalTime,
	aa edgedb.Duration,
	ab edgedb.OptionalDuration,
	ac *big.Int,
	ad edgedb.OptionalBigInt,
	ae edgedb.RelativeDuration,
	af edgedb.OptionalRelativeDuration,
	ag edgedb.DateDuration,
	ah edgedb.OptionalDateDuration,
	ai edgedb.Memory,
	aj edgedb.OptionalMemory,
	ak edgedb.OptionalRangeInt32,
	al edgedb.RangeInt32,
	am edgedb.OptionalRangeInt64,
	an edgedb.RangeInt64,
	ao edgedb.OptionalRangeFloat32,
	ap edgedb.RangeFloat32,
	aq edgedb.OptionalRangeFloat64,
	ar edgedb.RangeFloat64,
	as edgedb.OptionalRangeDateTime,
	at edgedb.RangeDateTime,
	au edgedb.OptionalRangeLocalDateTime,
	av edgedb.RangeLocalDateTime,
	aw edgedb.OptionalRangeLocalDate,
	ax edgedb.RangeLocalDate,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		myQueryCmd,
		&result,
		map[string]interface{}{
			"a":  a,
			"b":  b,
			"c":  c,
			"d":  d,
			"e":  e,
			"f":  f,
			"g":  g,
			"h":  h,
			"i":  i,
			"j":  j,
			"k":  k,
			"l":  l,
			"m":  m,
			"n":  n,
			"o":  o,
			"p":  p,
			"q":  q,
			"r":  r,
			"s":  s,
			"t":  t,
			"u":  u,
			"v":  v,
			"w":  w,
			"x":  x,
			"y":  y,
			"z":  z,
			"aa": aa,
			"ab": ab,
			"ac": ac,
			"ad": ad,
			"ae": ae,
			"af": af,
			"ag": ag,
			"ah": ah,
			"ai": ai,
			"aj": aj,
			"ak": ak,
			"al": al,
			"am": am,
			"an": an,
			"ao": ao,
			"ap": ap,
			"aq": aq,
			"ar": ar,
			"as": as,
			"at": at,
			"au": au,
			"av": av,
			"aw": aw,
			"ax": ax,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
