// Code generated by github.com/edgedb/edgedb-go/cmd/edgeql-go DO NOT EDIT.

package when_no_go_files_in_dir_dir_name_becomes_package_name

import (
	"context"
	_ "embed"
	"time"

	gel "github.com/edgedb/edgedb-go"
)

//go:embed select_args.edgeql
var selectArgsCmd string

// selectArgsResult
// is part of the return type for
// SelectArgs()
type selectArgsResult struct {
	Str      string    `gel:"Str"`
	DateTime time.Time `gel:"DateTime"`
}

// SelectArgs
// runs the query found in
// select_args.edgeql
func SelectArgs(
	ctx context.Context,
	client *gel.Client,
	str string,
	datetime time.Time,
) (selectArgsResult, error) {
	var result selectArgsResult

	err := client.QuerySingle(
		ctx,
		selectArgsCmd,
		&result,
		map[string]interface{}{
			"str":      str,
			"datetime": datetime,
		},
	)

	return result, err
}

// SelectArgsJSON
// runs the query found in
// select_args.edgeql
// returning the results as json encoded bytes
func SelectArgsJSON(
	ctx context.Context,
	client *gel.Client,
	str string,
	datetime time.Time,
) ([]byte, error) {
	var result []byte

	err := client.QuerySingleJSON(
		ctx,
		selectArgsCmd,
		&result,
		map[string]interface{}{
			"str":      str,
			"datetime": datetime,
		},
	)
	if err != nil {
		return nil, err
	}

	return result, nil
}
